/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import java.awt.print.Book;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author esdras
 */
public class DevMenu extends javax.swing.JFrame {

    /**
     * Creates new form DevMenu
     */
    public static String nome;
    public static String caminho;
    public static String header;
    public static byte[] conteudo;
    public static String dataCriacao;
    
    
    ImageIcon leafIcon = createImageIcon("icon.png");
    ImageIcon folderIcon = createImageIcon("folder.png");
    ImageIcon closedFolderIcon = createImageIcon("closedfolder.png");
    
    public DevMenu(String nome, String caminho, String header, String dataCriacao, byte[] conteudo, int novo) {
        this.nome = nome;
        this.caminho = caminho;
        this.header = header;
        this.dataCriacao = dataCriacao;
        this.conteudo = conteudo;          
        initComponents();
        
        /*
        if (leafIcon != null) {
            DefaultTreeCellRenderer renderer = 
                new DefaultTreeCellRenderer();
            renderer.setLeafIcon(leafIcon);
            renderer.setOpenIcon(folderIcon);
            renderer.setClosedIcon(closedFolderIcon);
            jTree1.setCellRenderer(renderer);
        }*/
        
        TreeCellRenderer renderer = new telas.CustomTreeRenderer();
        
        jTree1.setCellRenderer(renderer);
        
        if (novo == 0)
            montarArvore();
       
    }
    
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = DevMenu.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddFile = new javax.swing.JButton();
        btnExtractFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        btnCreateDir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAddFile.setText("Add File");
        btnAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileActionPerformed(evt);
            }
        });

        btnExtractFile.setText("Extrair");
        btnExtractFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractFileActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("DEV");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jTree1);

        btnCreateDir.setText("Criar Dir");
        btnCreateDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateDirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addComponent(btnCreateDir, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddFile, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExtractFile, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddFile, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExtractFile, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCreateDir, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private JTree jt;
    private void btnAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setDialogTitle("Selecione o local do Arquivo");
        
        fileChooser.setAcceptAllFileFilterUsed(true);
       
        
        if(fileChooser.showSaveDialog(new JFrame()) == JFileChooser.APPROVE_OPTION) {
            DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            TreePath tp = jTree1.getSelectionPath();

            File file = fileChooser.getSelectedFile();
            writebytes(file);
            
            if(model.getRoot() == null){
                 root = new DefaultMutableTreeNode("DEV");
            }
            DefaultMutableTreeNode file_name = new DefaultMutableTreeNode(file.getName(), false);
            root.add(file_name);
            model.reload();
        }
    }//GEN-LAST:event_btnAddFileActionPerformed

    private void btnExtractFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractFileActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if(node != null){
            if(node.isLeaf()){     
                TreePath[] paths = jTree1.getSelectionPaths();
                String nomeExtrair = "";
                for(TreePath path : paths){
                    nomeExtrair = path.getLastPathComponent().toString();
                }
                
                
                String extensao = nomeExtrair.substring(nomeExtrair.indexOf(".")+1);
                String nome = nomeExtrair.substring(0, nomeExtrair.indexOf("."));
                JFileChooser fileChooser = new JFileChooser();

                fileChooser.setDialogTitle("Selecione o local do Arquivo");

                fileChooser.setAcceptAllFileFilterUsed(false);
                fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Arquivos " + extensao +" (." + extensao + ")", extensao));
                fileChooser.setName(nomeExtrair);

                fileChooser.setSelectedFile(new File(nome));

                if(fileChooser.showSaveDialog(new JFrame()) == JFileChooser.APPROVE_OPTION) {
                    
                    List<String> list = Arrays.asList(header.split("###"));
                    list = new ArrayList<String>(list);
                    
                    list.remove(0);
                    list.remove(0);
                    int kk = 0;
                    
                    
                                       
                    /*
                        Parte 0: Nome arq + extensão
                        Parte 1: Tipo (Arq ou Dir)
                        Parte 2: Caminho Original do Arquivo
                        Parte 3: Byte Inicial do Arquivo no .dev
                        Parte 4: Total de Bytes do Arquivo
                        Parte 5: Data e hora da Inserção do Arquivo no .dev
                        Parte 6: Localição na Árvore Interna Arquivo no .dev
                    */
                    int bytes_total_ini = 0;
                    int bytes_total_arq = 0;
                    for(String s : list) {
                        String [] arquivoPart = s.split("&&&");
                        if (arquivoPart[0].equals(nomeExtrair)){
                            System.out.println("Parte 0, Arquivo " + kk + ": " + arquivoPart[0]);
                            System.out.println("Parte 1, Arquivo " + kk + ": " + arquivoPart[1]);
                            System.out.println("Parte 2, Arquivo " + kk + ": " + arquivoPart[2]);
                            bytes_total_ini = Integer.parseInt(arquivoPart[3]) + header.length();
                            System.out.println("Parte 3, Arquivo " + kk + ": " + bytes_total_ini);
                            bytes_total_arq = Integer.parseInt(arquivoPart[4]);
                            System.out.println("Parte 4, Arquivo " + kk + ": " + bytes_total_arq);
                            System.out.println("Parte 5, Arquivo " + kk + ": " + arquivoPart[5]);
                            System.out.println("");
                            System.out.println("");
                        }
                        kk++;
                    }
                    System.out.println(caminho+".dev");
                    int total_read = bytes_total_arq;
                    try{
                        byte[] b = new byte[total_read];
                        //InputStream is = new FileInputStream(caminho+".dev");
                        RandomAccessFile is = new RandomAccessFile(caminho+".dev", "rw");

                        FileOutputStream os = new FileOutputStream(fileChooser.getSelectedFile() + "." + extensao);

                        int readBytes = 0;
                        
                        File f = new File("oi");
                        
                        is.seek(bytes_total_ini + 3);
                        while ((readBytes  = is.read(b)) != -1) {
                            os.write(b, 0, readBytes);
                        }
                        is.close();
                        os.close();
                    } catch(IOException ioe){
                        System.out.println("Error "+ioe.getMessage());
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Não é possível extrair um diretório!\n\nPor favor, selecione um arquivo.", "ATENÇÂO", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Por favor, selecione o arquivo a ser extraído!", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnExtractFileActionPerformed

    private void btnCreateDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateDirActionPerformed
        
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
            if(node != null){
                TreePath tp = jTree1.getSelectionPath();
                System.out.println("Get Parent Path" + tp.getParentPath());
                System.out.println("Get Path" + tp.getPath());
                System.out.println("To String" + tp.toString());
                String jTreeVarSelectedPath = "";
                Object[] paths = jTree1.getSelectionPath().getPath();
                for (int i=0; i<paths.length; i++) {
                    jTreeVarSelectedPath += paths[i];
                    if (i+1 <paths.length ) {
                        jTreeVarSelectedPath += "/";
                    }
                }
                
                System.out.println(jTreeVarSelectedPath);
                
                
                if(node.getAllowsChildren()){
                    String nomePasta = null;
                    do{
                         nomePasta = JOptionPane.showInputDialog("Digite o nome da nova pasta:");
                         System.out.println(nomePasta);
                    }
                    while(nomePasta.equals(""));
                    
                    if(nomePasta != null){
                        
                        try{

                            SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

                            String data_criacao = fmt.format(new Date());

                            int inicio = conteudo.length;

                            header += "###" + nomePasta + "&&&2&&&" + "DIRETORIO"
                                    + "&&&" + 0 + "&&&" + 0 + "&&&" + data_criacao + "&&&" + jTreeVarSelectedPath;
                            
                            /*header += "###" + file.getName() + "&&&1&&&" + file.getPath() 
                                    + "&&&" + inicio + "&&&" + fileBytes.length + "&&&" + data_criacao + "&&&" + jTreeVarSelectedPath;*/

                            FileOutputStream dev = new FileOutputStream(caminho+".dev");            
                            String newBytesHeader = header + "$$$" + new String(conteudo);
                            dev.write(newBytesHeader.getBytes());
                            System.out.println("Pasta Adicionada com Sucesso");
                            dev.close();
                        }
                        catch(Exception e){
                            System.out.println("Exception" + e);
                        }
                        
                        
                        DefaultMutableTreeNode folder_name = new DefaultMutableTreeNode(nomePasta);
                        node.add(folder_name);
                        model.reload();
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Não é possível criar pastas em arquivos!\n\nPor favor, selecione uma pasta.", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
                }
            } 
            else{
                JOptionPane.showMessageDialog(null, "Selecione uma Pasta!", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
            }
       
    }//GEN-LAST:event_btnCreateDirActionPerformed

    
    private byte[] readFileToByteArray(File file) {
        FileInputStream fis = null;
        // Creating a byte array using the length of the file
        // file.length returns long which is cast to int
        byte[] bArray = new byte[(int) file.length()];
        try{
            fis = new FileInputStream(file);
            fis.read(bArray);
            fis.close();        
            
        }catch(IOException ioExp){
            ioExp.printStackTrace();
        }
        return bArray;
    }
    
    private void writebytes(File file){
        try{
            byte[] fileBytes = readFileToByteArray(file);
            
            SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

            String data_criacao = fmt.format(new Date());
            
            
            String jTreeVarSelectedPath = "";
            Object[] pathhs = jTree1.getSelectionPath().getPath();
            for (int i=0; i<pathhs.length; i++) {
                jTreeVarSelectedPath += pathhs[i];
                if (i+1 <pathhs.length ) {
                    jTreeVarSelectedPath += "/";
                }
            }
            System.out.println(jTreeVarSelectedPath);
            
            int inicio = conteudo.length;
            
            header += "###" + file.getName() + "&&&1&&&" + file.getPath() 
                   + "&&&" + inicio + "&&&" + fileBytes.length + "&&&" + data_criacao + "&&&" + jTreeVarSelectedPath;
            
            
            byte[] newBytes = Arrays.copyOf(conteudo, conteudo.length + fileBytes.length);
            System.arraycopy(fileBytes, 0, newBytes, conteudo.length, fileBytes.length);
            
            conteudo = newBytes;
            
            FileOutputStream dev = new FileOutputStream(caminho+".dev");            
            String newBytesHeader = header + "$$$" + new String(conteudo);
            dev.write(newBytesHeader.getBytes());
            System.out.println("Arquivo Inserido com Sucesso");
            dev.close();
        }
        catch(Exception e){
            System.out.println("Exception" + e);
        }
    }
    
     private void montarArvore(){
        // Ler header
        List<String> list = Arrays.asList(header.split("###"));
        list = new ArrayList<String>(list);
        
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) jTree1.getModel().getRoot(); 
        if(model.getRoot() == null){
                 root = new DefaultMutableTreeNode("DEV");
        }
        list.remove(0);
        list.remove(0);
        
        /*
        for(String s : list) {
           String [] arquivoPart = s.split("&&&");
           DefaultMutableTreeNode file_name;
           
           int num_folder = 1;
           if(arquivoPart[1].equals("2")){
               System.out.println("-----------------------");
               System.out.println("Dir: " + arquivoPart[0]);
               System.out.println(num_folder + "ª PASTA");
               String [] path = arquivoPart[6].split("/");
              
               ArrayList<String> pathList = new ArrayList<String>(Arrays.asList(path));
               pathList.add(arquivoPart[0]);
               path = pathList.toArray(path);
               
               System.out.print("Path Original: ");
               for (String path1 : path){
                    System.out.print(path1+"/");
               }
               /*for (int i = 0; i < path.length / 2; i++) {
                    String temp = path[i];
                    path[i] = path[path.length - 1 - i];
                    path[path.length - 1 - i] = temp;
               }
               System.out.println("");
               
               System.out.print("Path Invertido: ");
               for (String path1 : path){
                    System.out.print(path1+"/");
               }
               System.out.println("");
               System.out.println("");
               
               DefaultMutableTreeNode as;
               DefaultMutableTreeNode as_ant;
               int count = 0;
               String path_done = "";
               for (String path1 : path) {
                   System.out.print("Caminho Pasta Atual: ");
                   System.out.print(path1 + "/");
                   as = new DefaultMutableTreeNode(path1);
                   System.out.println("");
                   System.out.println("As: "+as);
                   System.out.println("GetRoot: " + jTree1.getModel().getRoot());
                   if(path.length != 1){
                        if (!path1.equals("DEV")){
                            as_ant = new DefaultMutableTreeNode(path[count-1]);
                            if(!path[count-1].equals("DEV")){
                                if(findText(path_done)){
                                    as_ant.add(as);
                                    root.add(as_ant);
                                }
                            }
                            else{
                                root.add(as);
                            }
                       }
                   }
                   else{
                       as = new DefaultMutableTreeNode(arquivoPart[0]);
                       root.add(as);
                   }
                   
                   path_done += path1 + "/";
                   count++;
                   System.out.println("");
                   
               }
           }
           num_folder++;
           
           model.reload();
        }*/
        
        for(String s : list) {
           String [] arquivoPart = s.split("&&&");
           DefaultMutableTreeNode file_name;
           
           int num_folder = 1;
           if(arquivoPart[1].equals("1")){
               System.out.println("-----------------------");
               System.out.println("Dir: " + arquivoPart[0]);
               System.out.println(num_folder + "ª PASTA");
               String [] path = arquivoPart[6].split("/");
              
               ArrayList<String> pathList = new ArrayList<String>(Arrays.asList(path));
               pathList.add(arquivoPart[0]);
               path = pathList.toArray(path);
               
               System.out.print("Path Original: ");
               for (String path1 : path){
                    System.out.print(path1+"/");
               }
               /*for (int i = 0; i < path.length / 2; i++) {
                    String temp = path[i];
                    path[i] = path[path.length - 1 - i];
                    path[path.length - 1 - i] = temp;
               }
               System.out.println("");
               
               System.out.print("Path Invertido: ");
               for (String path1 : path){
                    System.out.print(path1+"/");
               }*/
               System.out.println("");
               System.out.println("");
               
               DefaultMutableTreeNode as;
               DefaultMutableTreeNode as_ant;
               int count = 0;
               String path_done = "";
               for (String path1 : path) {
                   System.out.print("Caminho Pasta Atual: ");
                   System.out.print(path1 + "/");
                   as = new DefaultMutableTreeNode(path1, false);
                   System.out.println("");
                   System.out.println("As: "+as);
                   System.out.println("GetRoot: " + jTree1.getModel().getRoot());
                   if(path.length != 1){
                        if (!path1.equals("DEV")){
                            as_ant = new DefaultMutableTreeNode(path[count-1]);
                            if(!path[count-1].equals("DEV")){
                                if(findText(path_done)){
                                    as_ant.add(as);
                                    //root.add(as_ant);
                                }
                            }
                            else{
                                root.add(as);
                            }
                       }
                   }
                   else{
                       as = new DefaultMutableTreeNode(arquivoPart[0]);
                       root.add(as);
                   }
                   
                   path_done += path1 + "/";
                   count++;
                   System.out.println("");
                   
               }
           }
           num_folder++;
           
           model.reload();
        }
        
    }
    public boolean findText(String nodes) {
        String[] parts = nodes.split("/");
        TreePath path = null;
        for (String part : parts) {
            int row = (path==null ? 0 : jTree1.getRowForPath(path));
            path = jTree1.getNextMatch(part, row, Position.Bias.Forward);
            if (path==null) {
                return false;
            }
        }
        jTree1.scrollPathToVisible(path);
        jTree1.setSelectionPath(path);

        return path!=null;
    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
                        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnCreateDir;
    private javax.swing.JButton btnExtractFile;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

}
