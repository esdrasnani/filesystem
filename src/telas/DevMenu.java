/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import com.sun.javafx.scene.control.skin.VirtualFlow;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.print.Book;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import java.lang.Object;
import java.nio.ByteBuffer;
import javax.swing.Icon;
import javax.swing.UIManager;

/**
 *
 * @author esdras
 */
public class DevMenu extends javax.swing.JFrame {

    /**
     * Creates new form DevMenu
     */
    public static String nome;
    public static String caminho;
    public static String header;
    public static byte[] conteudo;
    public static String dataCriacao;

    ImageIcon leafIcon = createImageIcon("icon.png");
    ImageIcon folderIcon = createImageIcon("folder.png");
    ImageIcon closedFolderIcon = createImageIcon("closedfolder.png");

    public DevMenu(String nome, String caminho, String header, String dataCriacao, byte[] conteudo, int novo) {
        this.nome = nome;
        this.caminho = caminho;
        this.header = header;
        this.dataCriacao = dataCriacao;
        this.conteudo = conteudo;

        initComponents();

        TreeCellRenderer renderer = new telas.CustomTreeRenderer();
        jTree1.setCellRenderer(renderer);

        if (novo == 0) {
            montarArvore();
        }

    }

    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = DevMenu.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddFile = new javax.swing.JButton();
        btnExtractFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        btnCreateDir = new javax.swing.JButton();
        excludeNode = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DEV File System");
        setBackground(new java.awt.Color(51, 153, 255));

        btnAddFile.setText("Add File");
        btnAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileActionPerformed(evt);
            }
        });

        btnExtractFile.setText("Extrair");
        btnExtractFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractFileActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("DEV");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jTree1);

        btnCreateDir.setText("Criar Dir");
        btnCreateDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateDirActionPerformed(evt);
            }
        });

        excludeNode.setText("Excluir");
        excludeNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeNodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(excludeNode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddFile, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                    .addComponent(btnCreateDir, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExtractFile, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddFile, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCreateDir, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExtractFile, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(excludeNode, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 123, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private JTree jt;
    private void btnAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFileActionPerformed

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();

        if (node.getAllowsChildren()) {
            JFileChooser fileChooser = new JFileChooser();

            fileChooser.setDialogTitle("Selecione o local do Arquivo");

            fileChooser.setAcceptAllFileFilterUsed(true);

            if (fileChooser.showSaveDialog(new JFrame()) == JFileChooser.APPROVE_OPTION) {
                DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
                DefaultMutableTreeNode root = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                TreePath tp = jTree1.getSelectionPath();

                File file = fileChooser.getSelectedFile();
                writebytes(file);

                if (model.getRoot() == null) {
                    root = new DefaultMutableTreeNode("DEV");
                }
                DefaultMutableTreeNode file_name = new DefaultMutableTreeNode(file.getName(), false);
                root.add(file_name);
                model.reload();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Não é adicionar arquivos em arquivos!\n\nPor favor, selecionar uma pasta.", "ATENÇÂO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddFileActionPerformed

    private void btnExtractFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractFileActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (node != null) {
            if (node.isLeaf()) {
                TreePath[] paths = jTree1.getSelectionPaths();
                String nomeExtrair = "";
                for (TreePath path : paths) {
                    nomeExtrair = path.getLastPathComponent().toString();
                }

                String extensao = nomeExtrair.substring(nomeExtrair.indexOf(".") + 1);
                String nome = nomeExtrair.substring(0, nomeExtrair.indexOf("."));
                JFileChooser fileChooser = new JFileChooser();

                fileChooser.setDialogTitle("Selecione o local do Arquivo");

                fileChooser.setAcceptAllFileFilterUsed(false);
                fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Arquivos " + extensao + " (." + extensao + ")", extensao));
                fileChooser.setName(nomeExtrair);

                fileChooser.setSelectedFile(new File(nome));

                if (fileChooser.showSaveDialog(new JFrame()) == JFileChooser.APPROVE_OPTION) {

                    List<String> list = Arrays.asList(header.split("###"));
                    list = new ArrayList<String>(list);

                    list.remove(0);
                    list.remove(0);
                    int kk = 0;
                    /*
                        Parte 0: Nome arq + extensão
                        Parte 1: Tipo (Arq ou Dir)
                        Parte 2: Caminho Original do Arquivo
                        Parte 3: Byte Inicial do Arquivo no .dev
                        Parte 4: Total de Bytes do Arquivo
                        Parte 5: Data e hora da Inserção do Arquivo no .dev
                        Parte 6: Localição na Árvore Interna Arquivo no .dev
                     */
                    int bytes_total_ini = 0;
                    int bytes_total_arq = 0;
                    for (String s : list) {
                        String[] arquivoPart = s.split("&&&");
                        if (arquivoPart[0].equals(nomeExtrair)) {
                            bytes_total_ini = Integer.parseInt(arquivoPart[3]) + header.length();
                            bytes_total_arq = Integer.parseInt(arquivoPart[4]);
                        }
                        kk++;
                    }
                    int total_read = bytes_total_arq;
                    try {
                        byte[] b = new byte[total_read];
                        //InputStream is = new FileInputStream(caminho+".dev");
                        RandomAccessFile is = new RandomAccessFile(caminho + ".dev", "rw");

                        FileOutputStream os = new FileOutputStream(fileChooser.getSelectedFile() + "." + extensao);

                        int readBytes = 0;

                        File f = new File("oi");

                        is.seek(bytes_total_ini + 3);
                        while ((readBytes = is.read(b)) != -1) {
                            os.write(b, 0, readBytes);
                        }
                        is.close();
                        os.close();
                    } catch (IOException ioe) {
                        System.out.println("Error " + ioe.getMessage());
                    }

                    JOptionPane.showMessageDialog(null, "Arquivo Extraído com Sucesso!", "ATENÇÂO", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possível extrair um diretório!\n\nPor favor, selecione um arquivo.", "ATENÇÂO", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, selecione o arquivo a ser extraído!", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnExtractFileActionPerformed

    private void btnCreateDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateDirActionPerformed

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        if (node != null) {
            TreePath tp = jTree1.getSelectionPath();
            String jTreeVarSelectedPath = "";
            Object[] paths = jTree1.getSelectionPath().getPath();
            for (int i = 0; i < paths.length; i++) {
                jTreeVarSelectedPath += paths[i];
                if (i + 1 < paths.length) {
                    jTreeVarSelectedPath += "/";
                }
            }

            System.out.println(jTreeVarSelectedPath);

            if (node.getAllowsChildren()) {
                String nomePasta = null;
                do {
                    nomePasta = JOptionPane.showInputDialog("Digite o nome da nova pasta:");
                } while (nomePasta.equals(""));

                if (nomePasta != null) {

                    try {

                        SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

                        String data_criacao = fmt.format(new Date());

                        int inicio = conteudo.length;

                        header += "###" + nomePasta + "&&&2&&&" + "DIRETORIO"
                                + "&&&" + 0 + "&&&" + 0 + "&&&" + data_criacao + "&&&" + jTreeVarSelectedPath;

                        FileOutputStream dev = new FileOutputStream(caminho + ".dev");
                        String newBytesHeader = header + "$$$" + new String(conteudo);
                        dev.write(newBytesHeader.getBytes());
                        dev.close();
                    } catch (Exception e) {
                        System.out.println("Exception" + e);
                    }

                    DefaultMutableTreeNode folder_name = new DefaultMutableTreeNode(nomePasta);
                    node.add(folder_name);
                    model.reload();
                    model.reload();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possível criar pastas em arquivos!\n\nPor favor, selecione uma pasta.", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma Pasta!", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnCreateDirActionPerformed

    private void excludeNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeNodeActionPerformed
        
            DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();

            TreePath[] paths = jTree1.getSelectionPaths();
            if (paths != null) {

                TreePath[] pathhs = jTree1.getSelectionPaths();
                String nomeExtrair = "";
                for (TreePath path : pathhs) {
                    nomeExtrair = path.getLastPathComponent().toString();
                }

                List<String> list = Arrays.asList(header.split("###"));
                list = new ArrayList<String>(list);

                list.remove(0);
                list.remove(0);
                int kk = 0;
                int bytes_total_ini = 0;
                int bytes_total_arq = 0;
                String header_arq = "";
                for (String s : list) {
                    String[] arquivoPart = s.split("&&&");
                    if (arquivoPart[0].equals(nomeExtrair)) {
                        bytes_total_ini = Integer.parseInt(arquivoPart[3]);
                        bytes_total_arq = Integer.parseInt(arquivoPart[4]);
                        header_arq = s;
                    }
                    kk++;
                }
                int total_read = bytes_total_arq;


                ByteBuffer buffer = ByteBuffer.wrap(conteudo);
                

                byte[] newArray = new byte[total_read];
                buffer.position(bytes_total_ini);
                buffer.put(newArray);
                
                header = header.replace("###" + header_arq, "");
                try{
                FileOutputStream dev = new FileOutputStream(caminho + ".dev");
                String newBytesHeader = header + "$$$" + new String(conteudo);
                dev.write(newBytesHeader.getBytes());
                dev.close();

                for (TreePath path : paths) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                    if (node.getParent() != null) {
                        model.removeNodeFromParent(node);
                    }
                }
            }
                catch(Exception e){
            System.out.println(e);
        }
        }
        
    }//GEN-LAST:event_excludeNodeActionPerformed

    private byte[] readFileToByteArray(File file) {
        FileInputStream fis = null;
        // Creating a byte array using the length of the file
        // file.length returns long which is cast to int
        byte[] bArray = new byte[(int) file.length()];
        try {
            fis = new FileInputStream(file);
            fis.read(bArray);
            fis.close();

        } catch (IOException ioExp) {
            ioExp.printStackTrace();
        }
        return bArray;
    }

    private void writebytes(File file) {
        try {
            byte[] fileBytes = readFileToByteArray(file);

            SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

            String data_criacao = fmt.format(new Date());

            String jTreeVarSelectedPath = "";
            Object[] pathhs = jTree1.getSelectionPath().getPath();
            for (int i = 0; i < pathhs.length; i++) {
                jTreeVarSelectedPath += pathhs[i];
                if (i + 1 < pathhs.length) {
                    jTreeVarSelectedPath += "/";
                }
            }
            System.out.println(jTreeVarSelectedPath);

            int inicio = conteudo.length;

            header += "###" + file.getName() + "&&&1&&&" + file.getPath()
                    + "&&&" + inicio + "&&&" + fileBytes.length + "&&&" + data_criacao + "&&&" + jTreeVarSelectedPath;

            byte[] newBytes = Arrays.copyOf(conteudo, conteudo.length + fileBytes.length);
            System.arraycopy(fileBytes, 0, newBytes, conteudo.length, fileBytes.length);

            conteudo = newBytes;

            FileOutputStream dev = new FileOutputStream(caminho + ".dev");
            String newBytesHeader = header + "$$$" + new String(conteudo);
            dev.write(newBytesHeader.getBytes());
            dev.close();
        } catch (Exception e) {
            System.out.println("Exception" + e);
        }
    }

    private void montarArvore() {
        // Ler header
        List<String> list = Arrays.asList(header.split("###"));
        list = new ArrayList<String>(list);

        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
        if (model.getRoot() == null) {
            root = new DefaultMutableTreeNode("DEV");
        }
        list.remove(0);
        list.remove(0);

        List<List> paths = new ArrayList<>();
        for (String s : list) {
            String[] arquivoPart = s.split("&&&");
            String[] dirPart = arquivoPart[6].split("/");
            String[] test = arquivoPart[6].split("\\s*/\\s*");
            String[] tesst = new String[test.length];

            int i;
            int l = 1;

            if (test.length == 1) {
                tesst[0] = arquivoPart[0];
            } else {
                for (i = 0; l < test.length; i++) {
                    tesst[i] = test[l];
                    l++;
                }

                tesst[i] = arquivoPart[0];
            }
            List<String> items = Arrays.asList(tesst);

            paths.add(items);

            DefaultMutableTreeNode node = new DefaultMutableTreeNode(arquivoPart[0]);
        }

        for (int j = 0; j < paths.size(); j++) {
            List<String> atual = new ArrayList<String>();
            atual = paths.get(j);
            String result = atual.stream()
                    .map(n -> String.valueOf(n))
                    .collect(Collectors.joining("/"));
            buildTreeFromString(model, result);

        }
        model.reload();

    }

    private void buildTreeFromString(final DefaultTreeModel model, final String str) {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        String[] strings = str.split("/");

        DefaultMutableTreeNode node = root;

        for (String s : strings) {
            int index = childIndex(node, s);

            if (index < 0) {
                DefaultMutableTreeNode newChild;
                if (s.contains(".")) {
                    newChild = new DefaultMutableTreeNode(s, false);

                } else {
                    newChild = new DefaultMutableTreeNode(s, true);
                }
                node.insert(newChild, node.getChildCount());
                node = newChild;

            } else {
                node = (DefaultMutableTreeNode) node.getChildAt(index);
            }
        }
    }

    private int childIndex(final DefaultMutableTreeNode node, final String childValue) {
        Enumeration<DefaultMutableTreeNode> children = node.children();
        DefaultMutableTreeNode child = null;
        int index = -1;

        while (children.hasMoreElements() && index < 0) {
            child = children.nextElement();

            if (child.getUserObject() != null && childValue.equals(child.getUserObject())) {
                index = node.getIndex(child);
            }
        }

        return index;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DevMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnCreateDir;
    private javax.swing.JButton btnExtractFile;
    private javax.swing.JButton excludeNode;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

}
